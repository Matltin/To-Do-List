// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: todo.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
    user_id,
    title,
    description,
    is_done
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, create_at, update_at, finished_at, title, description, is_done
`

type CreateTodoParams struct {
	UserID      int32        `json:"user_id"`
	Title       string       `json:"title"`
	Description string       `json:"description"`
	IsDone      sql.NullBool `json:"is_done"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.IsDone,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.FinishedAt,
		&i.Title,
		&i.Description,
		&i.IsDone,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1 AND user_id = $2
`

type DeleteTodoParams struct {
	ID     int64 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteTodo(ctx context.Context, arg DeleteTodoParams) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, arg.ID, arg.UserID)
	return err
}

const getTodoByID = `-- name: GetTodoByID :one
SELECT id, user_id, create_at, update_at, finished_at, title, description, is_done FROM todos 
WHERE id = $1
`

func (q *Queries) GetTodoByID(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoByID, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.FinishedAt,
		&i.Title,
		&i.Description,
		&i.IsDone,
	)
	return i, err
}

const getTodosByID = `-- name: GetTodosByID :many
SELECT id, user_id, create_at, update_at, finished_at, title, description, is_done FROM todos
WHERE user_id = $1
ORDER BY create_at DESC
LIMIT $2 OFFSET $3
`

type GetTodosByIDParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTodosByID(ctx context.Context, arg GetTodosByIDParams) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodosByID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreateAt,
			&i.UpdateAt,
			&i.FinishedAt,
			&i.Title,
			&i.Description,
			&i.IsDone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET 
    title = $3,
    description = $4,
    is_done = $5
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, create_at, update_at, finished_at, title, description, is_done
`

type UpdateTodoParams struct {
	ID          int64        `json:"id"`
	UserID      int32        `json:"user_id"`
	Title       string       `json:"title"`
	Description string       `json:"description"`
	IsDone      sql.NullBool `json:"is_done"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.IsDone,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.FinishedAt,
		&i.Title,
		&i.Description,
		&i.IsDone,
	)
	return i, err
}
