// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package sqlc

import (
	"context"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT EXISTS (
    SELECT 1 FROM users WHERE email = $1
)
`

func (q *Queries) CheckUserExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    hashed_password,
    email
) VALUES (
    $1, $2, $3
) RETURNING id, create_at, username, hashed_password, email
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashedPassword, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreateAt,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, create_at, username, hashed_password, email FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreateAt,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
	)
	return i, err
}
